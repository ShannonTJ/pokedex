{"version":3,"sources":["DropDown.js","SearchBox.js","NavBar.js","Card.js","CardList.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["DropDown","dropDownChange","className","onChange","value","SearchBox","searchChange","type","placeholder","NavBar","id","Card","name","sprite","height","weight","alt","src","toUpperCase","toFixed","CardList","test","map","poke","i","key","sprites","front_default","Scroll","props","style","overflowY","border","children","App","onSearchChange","event","setState","searchfield","target","onDropDownChange","dropdown","state","test2","this","getallPokes","fetch","then","resp","json","data","results","url","prevState","filtered","filter","isNaN","toLowerCase","includes","toString","sorted","sort","a","b","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51aba980.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DropDown = ({dropDownChange}) => {\r\n\r\n\treturn(\r\n\t\t<div className =\"dib pa3\">\r\n\r\n\t\t\t\t\t<select className=\"tc pa3 ma ba b--blue bg-white\" onChange={dropDownChange}>\r\n\t\t\t\t\t\t<option value=\"pokedexorder\">Pokedex Order</option>\r\n\t\t\t\t\t\t<option value=\"height\">Height</option>\r\n\t\t\t\t\t\t<option value=\"weight\">Weight</option>\r\n\t\t\t\t\t</select>\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DropDown;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"dib pa3\">\r\n\t\t\t<input \r\n\t\t\tclassName=\"tc pa3 ma ba b--blue bg-white\"\r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder=\"Search Pokemon\" \r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './NavBar.css';\r\nimport DropDown from './DropDown';\r\nimport SearchBox from './SearchBox';\r\n\r\nconst NavBar = ({searchChange, dropDownChange}) => {\r\n\r\n        return (\r\n            <div>\r\n              <ul id=\"nav\">\r\n\r\n              <div id=\"text\">\r\n                <li><h1 className=\"ml4 mr2 white\">SimpleDex</h1></li>\r\n              </div>\r\n\r\n                <div id=\"container\">\r\n\t                <li><DropDown dropDownChange={dropDownChange}/></li>\r\n\t                <li><SearchBox searchChange={searchChange}/></li>\r\n\t            </div>\r\n\r\n              </ul>\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst Card = ({id, name, sprite, height, weight}) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-white dib w5 br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<div>\r\n\t\t\t\t<img alt=\"default front sprite\" src={sprite} />\r\n\t\t\t\t<h3>#{id} {name.toUpperCase()}</h3>\r\n\t\t\t\t<h4 className=\"tl\">Height: {(height/3.048).toFixed(2)} ft</h4>\r\n\t\t\t\t<h4 className=\"tl\">Weight: {(weight/4.536).toFixed(2)} lbs</h4>\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({test}) =>\r\n{\r\n\t//for each pokemon\r\n\t//get id, name, front sprite, height, weight\r\n\r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\t    test.map((poke, i) => {\r\n\t\t    \treturn (\r\n\t\t   \t\t\t <Card \r\n\t\t   \t\t\t \tkey = {i}\r\n\t\t   \t\t\t \tid={test[i].id} \r\n\t\t   \t\t\t \tname={test[i].name} \r\n\t\t   \t\t\t \tsprite={test[i].sprites.front_default}\r\n\t\t   \t\t\t\theight={test[i].height}\r\n\t\t   \t\t\t\tweight={test[i].weight}\r\n\t\t   \t\t\t \t/>\r\n\t\t    \t\t);\r\n\t\t  \t\t  })\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: \"scroll\", border: \"5px solid #FFFFFF\", height: \"800px\"}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\nimport './App.css';\nimport NavBar from './NavBar';\nimport CardList from './CardList';\nimport Scroll from './Scroll';\nimport SearchBox from './SearchBox';\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      test: [],\n      test2: [],\n      searchfield: '',\n      dropdown: 'pokedexorder'\n    };\n  }\n\n\ncomponentDidMount() {\n    this.getallPokes();\n}\n\nonSearchChange = (event) => {\n  this.setState({searchfield: event.target.value});\n}\n\nonDropDownChange = (event) => {\n  this.setState({dropdown: event.target.value});\n}\n\ngetallPokes() {\n\n  let url = `https://pokeapi.co/api/v2/pokemon?limit=151`;\n\n  fetch(url)\n    .then(resp => resp.json())\n    .then(data => this.setState({test: data.results}, () => {\n\n      this.state.test.map(poke => {\n\n        fetch(poke.url)\n        .then(resp => resp.json())\n        .then(data => {\n\n          this.setState((prevState) => ({test2: [...prevState.test2, data]}));\n        \n        })\n      })\n     })\n    );\n}\n\n  render() {\n\n    const {test, test2, searchfield, dropdown} = this.state;\n\n    //filter pokemon based on id and name\n    const filtered = test2.filter(poke => {\n\n      if (!(isNaN(searchfield))) {\n        return poke.id.toString().includes(searchfield)\n      }\n\n      else {\n        return poke.name.toLowerCase().includes(searchfield.toLowerCase())\n      }\n\n    })\n\n    let sorted = [];\n\n    if(dropdown === 'pokedexorder') {\n      sorted = filtered.sort(function(a,b) {\n        return (a.id - b.id);\n      })\n    }\n\n    else if(dropdown === 'height') {\n      sorted = filtered.sort(function(a,b) {\n        return (a.height - b.height);\n      })\n    }\n\n    else if(dropdown === 'weight') {\n      sorted = filtered.sort(function(a,b) {\n        return (a.weight - b.weight);\n      })\n    }\n\n\n    if(test2.length === 0) {\n      return <h1 className=\"tc f1 dib white\">Loading...</h1>\n    }\n\n    else { \n      return (\n        <div className=\"tc\">\n        <NavBar searchChange={this.onSearchChange} dropDownChange={this.onDropDownChange}/>\n        <Scroll>\n          <CardList test = {sorted}/>\n        </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}